  1 /*
  2  * Name: Jennifer Olszyna
  3  * Course-Section: CS 360 01, Spring 2021
  4  * Assignment: 5
  5  * Collaborators: none
  6  * Resources: Example TCP client from "Computer Networks: A Systems Approach"
  7  * Description: Simple TCP daytime client code in C
  8  * ------------------------------------------------------------------------------*/
  9
 10 #include <sys/socket.h>
 11 #include <sys/types.h>
 12 #include <stdint.h>
 13 #include <arpa/inet.h>
 14 #include <netdb.h>
 15 #include <netinet/in.h>
 16 #include <time.h>
 17 #include <err.h>
 18 #include <stdio.h>
 19 #include <stdlib.h>
 20 #include <string.h>
 21 #include <unistd.h>
 22
 23 #define SERVER_PORT 5012
 24 #define MAX_LINE 29
 25
 26 int
 27 main(int argc, char *argv[])
 28 {
 29     struct sockaddr_in serveraddr;
 30     char buf[MAX_LINE];
 31     char *host;
 32     struct hostent *hp;
 33     int s;
 34
 35     /* "get" host's name from command line */
 36     if (argc == 2) {
 37         host = argv[1];
 38     } else {
 39         errx(EXIT_FAILURE, "Could not find host \n");
 40     }
 41
 42     /* translate host name into peer's IP address */
 43     hp = gethostbyname(host);
 44     if (hp == NULL) {
 45         errx(EXIT_FAILURE, "Could not find IP address %s\n", host);
 46     }
 47
 48     /* build address data structure */
 49     memset(&serveraddr, '\0', sizeof serveraddr);
 50     serveraddr.sin_family = AF_INET;
 51     memcpy((char *)&serveraddr.sin_addr, hp->h_addr, hp->h_length);
 52     serveraddr.sin_port = htons(SERVER_PORT);
 53
 54     /* create socket s */
 55     if ((s = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
 56         errx(EXIT_FAILURE, "Socket creation error \n");
 57     }
 58
 59     /* connect to server */
 60     if (connect(s, (struct sockaddr *)&(serveraddr), sizeof(serveraddr)) < 0) {
 61         warnx("Connection error \n");
 62     }
 63
 64     /* read in date from server; more specifically the socket */
 65     if ((recv(s, buf, MAX_LINE, 0)) == EOF) {
 66         errx(EXIT_FAILURE, "Output error");
 67     }
 68
 69     /* print date time string to screen */
 70     puts(buf);
 71
 72     close(s);
 73
 74     return EXIT_SUCCESS;
 75 }